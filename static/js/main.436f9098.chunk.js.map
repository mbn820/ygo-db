{"version":3,"sources":["assets/logo.png","components/NavigationBar.js","components/CardGrid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationBar","searchFn","debouncedSearch","useCallback","debounce","term","collapseOnSelect","bg","variant","expand","fixed","Container","Brand","src","logo","height","Toggle","Collapse","Nav","className","Link","href","Form","InputGroup","Prepend","Text","FormControl","type","placeholder","onChange","e","target","value","CardGrid","props","useState","cards","selectedCard","setSelectedCard","showModal","setShowModal","Row","map","card","Col","sm","md","lg","key","id","Image","card_images","image_url_small","onClick","onSelectCard","Modal","show","onHide","centered","Header","closeButton","Title","name","Body","image_url","App","BASE_URL","data","setCards","useEffect","axios","get","then","res","console","log","searchTerm","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.436f9098.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6025d515.png\";","import React, { useCallback } from 'react';\nimport NavBar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport debounce from 'lodash/debounce';\nimport logo from '../assets/logo.png'\n\nconst NavigationBar = ({ searchFn }) => {\n  const debouncedSearch = useCallback(debounce(term => searchFn(term), 1000), []);\n\n  return (  \n    <div>            \n      <NavBar collapseOnSelect bg=\"dark\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\n        <Container>\n          <NavBar.Brand>\n            <img src={logo} height=\"50\"/>\n          </NavBar.Brand>\n          <NavBar.Toggle></NavBar.Toggle>\n          <NavBar.Collapse>\n            <Nav className=\"mr-auto d-flex align-items-center\">\n              <Nav.Link href=\"#latest\">Latest</Nav.Link>\n              <Nav.Link href=\"#decks\">Decks</Nav.Link>\n              <Nav.Link href=\"#sets\">Sets</Nav.Link>\n              <Nav.Link href=\"#archetypes\">Archetypes</Nav.Link>\n              <Nav.Link href=\"#deck-builder\">Deck Builder</Nav.Link>\n            </Nav>\n            <Form>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text><i className=\"fa fa-search\"></i></InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl type=\"text\" placeholder=\"Search Cards\" className=\"mr-2\" onChange={e => debouncedSearch(e.target.value)}></FormControl>\n              </InputGroup>\n            </Form>\n          </NavBar.Collapse>\n        </Container>\n      </NavBar>\n    </div>\n  );\n};\n\nexport default NavigationBar;\n","import React, { useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Modal from 'react-bootstrap/Modal'\n\nconst CardGrid = props => {\n  const [selectedCard, setSelectedCard] = useState(props.cards[0]);\n  const [showModal, setShowModal] = useState(false);\n\n  const onSelectCard = card => {\n    setSelectedCard(card);\n    setShowModal(true);\n  };\n\n  return (\n    <div>\n      <Row className=\"d-flex justify-content-center\">\n        {props.cards.map(card => (\n          <Col sm={6} md={3} lg={2} className=\"mb-3 d-flex justify-content-center\" key={card.id}>\n            <Image src={card?.card_images[0]?.image_url_small} onClick={() => onSelectCard(card)}></Image>\n          </Col>\n        ))}\n      </Row>\n\n      <Modal show={showModal} onHide={() => setShowModal(false)} centered=\"true\">\n        <Modal.Header closeButton>\n          <Modal.Title>{selectedCard?.name}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"d-flex justify-content-center\">\n          <Image src={selectedCard?.card_images[0]?.image_url} className=\"container-fluid\"></Image>\n          {/* <h1>TEST</h1> */}\n        </Modal.Body>\n      </Modal> \n    </div>\n  )\n}\n\nexport default CardGrid;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport NavigationBar from './components/NavigationBar';\nimport CardGrid from './components/CardGrid';\nimport Container from 'react-bootstrap/Container';\nimport axios from 'axios';\n\nfunction App() {\n  const BASE_URL = 'https://db.ygoprodeck.com/api/v7/cardinfo.php?num=50&offset=0';\n  const [cards, setCards] = useState({ data: [] });\n\n  useEffect(() => {\n    axios.get(BASE_URL)\n      .then(res => {\n        console.log(res.data);\n        setCards(res.data);\n      });\n\n  }, []);\n\n  const searchCard = (searchTerm) => {\n    console.log('Searching: ' + searchTerm);\n    \n    axios.get(`${BASE_URL}&fname=${searchTerm}`)\n      .then(res => setCards(res.data));\n  };\n\n  return (\n    <div>\n      <NavigationBar searchFn={searchCard}></NavigationBar>\n      <div style={{height: 90}}></div>\n      <Container>\n        <CardGrid cards={cards.data}></CardGrid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}